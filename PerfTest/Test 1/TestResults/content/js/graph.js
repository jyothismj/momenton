/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 478.0, "minX": 0.0, "maxY": 74303.0, "series": [{"data": [[0.0, 478.0], [0.1, 501.0], [0.2, 635.0], [0.3, 865.0], [0.4, 940.0], [0.5, 952.0], [0.6, 1345.0], [0.7, 1475.0], [0.8, 1661.0], [0.9, 1782.0], [1.0, 1849.0], [1.1, 1953.0], [1.2, 1976.0], [1.3, 2138.0], [1.4, 2278.0], [1.5, 2375.0], [1.6, 2571.0], [1.7, 2626.0], [1.8, 2674.0], [1.9, 2759.0], [2.0, 3077.0], [2.1, 3315.0], [2.2, 3484.0], [2.3, 3514.0], [2.4, 3594.0], [2.5, 3634.0], [2.6, 3828.0], [2.7, 3988.0], [2.8, 4037.0], [2.9, 4117.0], [3.0, 4368.0], [3.1, 4506.0], [3.2, 4562.0], [3.3, 4876.0], [3.4, 4881.0], [3.5, 5119.0], [3.6, 5322.0], [3.7, 5482.0], [3.8, 5613.0], [3.9, 5793.0], [4.0, 5882.0], [4.1, 6586.0], [4.2, 6759.0], [4.3, 6907.0], [4.4, 7060.0], [4.5, 7182.0], [4.6, 7351.0], [4.7, 7446.0], [4.8, 7667.0], [4.9, 7823.0], [5.0, 7888.0], [5.1, 8088.0], [5.2, 8319.0], [5.3, 8690.0], [5.4, 9000.0], [5.5, 9265.0], [5.6, 9480.0], [5.7, 9652.0], [5.8, 9733.0], [5.9, 9777.0], [6.0, 9952.0], [6.1, 10320.0], [6.2, 10418.0], [6.3, 10570.0], [6.4, 10649.0], [6.5, 10785.0], [6.6, 10877.0], [6.7, 11117.0], [6.8, 11152.0], [6.9, 11439.0], [7.0, 11501.0], [7.1, 11520.0], [7.2, 11654.0], [7.3, 11746.0], [7.4, 11768.0], [7.5, 11798.0], [7.6, 11891.0], [7.7, 11957.0], [7.8, 12005.0], [7.9, 12078.0], [8.0, 12245.0], [8.1, 12314.0], [8.2, 12355.0], [8.3, 12434.0], [8.4, 12491.0], [8.5, 12580.0], [8.6, 12634.0], [8.7, 12678.0], [8.8, 12811.0], [8.9, 12834.0], [9.0, 12869.0], [9.1, 12909.0], [9.2, 12976.0], [9.3, 12987.0], [9.4, 13024.0], [9.5, 13054.0], [9.6, 13102.0], [9.7, 13209.0], [9.8, 13219.0], [9.9, 13292.0], [10.0, 13299.0], [10.1, 13308.0], [10.2, 13399.0], [10.3, 13437.0], [10.4, 13462.0], [10.5, 13478.0], [10.6, 13585.0], [10.7, 13629.0], [10.8, 13685.0], [10.9, 13706.0], [11.0, 13769.0], [11.1, 13812.0], [11.2, 13862.0], [11.3, 13901.0], [11.4, 13957.0], [11.5, 13976.0], [11.6, 13986.0], [11.7, 14088.0], [11.8, 14123.0], [11.9, 14170.0], [12.0, 14182.0], [12.1, 14213.0], [12.2, 14268.0], [12.3, 14293.0], [12.4, 14331.0], [12.5, 14342.0], [12.6, 14404.0], [12.7, 14427.0], [12.8, 14437.0], [12.9, 14465.0], [13.0, 14482.0], [13.1, 14513.0], [13.2, 14540.0], [13.3, 14598.0], [13.4, 14610.0], [13.5, 14635.0], [13.6, 14681.0], [13.7, 14684.0], [13.8, 14819.0], [13.9, 14871.0], [14.0, 14904.0], [14.1, 14917.0], [14.2, 14970.0], [14.3, 14980.0], [14.4, 15008.0], [14.5, 15065.0], [14.6, 15078.0], [14.7, 15101.0], [14.8, 15131.0], [14.9, 15148.0], [15.0, 15260.0], [15.1, 15296.0], [15.2, 15326.0], [15.3, 15362.0], [15.4, 15372.0], [15.5, 15492.0], [15.6, 15624.0], [15.7, 15782.0], [15.8, 15873.0], [15.9, 15955.0], [16.0, 16005.0], [16.1, 16042.0], [16.2, 16058.0], [16.3, 16152.0], [16.4, 16203.0], [16.5, 16289.0], [16.6, 16366.0], [16.7, 16418.0], [16.8, 16496.0], [16.9, 16589.0], [17.0, 16648.0], [17.1, 16781.0], [17.2, 16843.0], [17.3, 17050.0], [17.4, 17130.0], [17.5, 17298.0], [17.6, 17366.0], [17.7, 17438.0], [17.8, 17606.0], [17.9, 17662.0], [18.0, 17737.0], [18.1, 17848.0], [18.2, 17913.0], [18.3, 17950.0], [18.4, 17976.0], [18.5, 17999.0], [18.6, 18046.0], [18.7, 18092.0], [18.8, 18101.0], [18.9, 18125.0], [19.0, 18182.0], [19.1, 18280.0], [19.2, 18293.0], [19.3, 18361.0], [19.4, 18390.0], [19.5, 18432.0], [19.6, 18475.0], [19.7, 18490.0], [19.8, 18520.0], [19.9, 18582.0], [20.0, 18620.0], [20.1, 18646.0], [20.2, 18708.0], [20.3, 18735.0], [20.4, 18758.0], [20.5, 18838.0], [20.6, 18862.0], [20.7, 18889.0], [20.8, 18926.0], [20.9, 18942.0], [21.0, 18976.0], [21.1, 18991.0], [21.2, 19025.0], [21.3, 19029.0], [21.4, 19050.0], [21.5, 19071.0], [21.6, 19087.0], [21.7, 19089.0], [21.8, 19099.0], [21.9, 19133.0], [22.0, 19157.0], [22.1, 19177.0], [22.2, 19188.0], [22.3, 19199.0], [22.4, 19218.0], [22.5, 19251.0], [22.6, 19264.0], [22.7, 19276.0], [22.8, 19292.0], [22.9, 19333.0], [23.0, 19346.0], [23.1, 19381.0], [23.2, 19413.0], [23.3, 19417.0], [23.4, 19424.0], [23.5, 19446.0], [23.6, 19455.0], [23.7, 19476.0], [23.8, 19505.0], [23.9, 19547.0], [24.0, 19551.0], [24.1, 19562.0], [24.2, 19599.0], [24.3, 19601.0], [24.4, 19637.0], [24.5, 19662.0], [24.6, 19677.0], [24.7, 19688.0], [24.8, 19726.0], [24.9, 19736.0], [25.0, 19751.0], [25.1, 19773.0], [25.2, 19786.0], [25.3, 19802.0], [25.4, 19822.0], [25.5, 19832.0], [25.6, 19839.0], [25.7, 19858.0], [25.8, 19879.0], [25.9, 19890.0], [26.0, 19907.0], [26.1, 19915.0], [26.2, 19936.0], [26.3, 19945.0], [26.4, 19956.0], [26.5, 19989.0], [26.6, 19998.0], [26.7, 20010.0], [26.8, 20021.0], [26.9, 20049.0], [27.0, 20063.0], [27.1, 20095.0], [27.2, 20124.0], [27.3, 20149.0], [27.4, 20195.0], [27.5, 20218.0], [27.6, 20225.0], [27.7, 20231.0], [27.8, 20271.0], [27.9, 20273.0], [28.0, 20285.0], [28.1, 20292.0], [28.2, 20341.0], [28.3, 20350.0], [28.4, 20383.0], [28.5, 20412.0], [28.6, 20463.0], [28.7, 20505.0], [28.8, 20522.0], [28.9, 20554.0], [29.0, 20607.0], [29.1, 20637.0], [29.2, 20647.0], [29.3, 20659.0], [29.4, 20706.0], [29.5, 20760.0], [29.6, 20781.0], [29.7, 20812.0], [29.8, 20848.0], [29.9, 20863.0], [30.0, 20891.0], [30.1, 20921.0], [30.2, 20985.0], [30.3, 20990.0], [30.4, 20994.0], [30.5, 20999.0], [30.6, 21000.0], [30.7, 21000.0], [30.8, 21000.0], [30.9, 21001.0], [31.0, 21001.0], [31.1, 21001.0], [31.2, 21001.0], [31.3, 21001.0], [31.4, 21001.0], [31.5, 21002.0], [31.6, 21002.0], [31.7, 21002.0], [31.8, 21002.0], [31.9, 21002.0], [32.0, 21002.0], [32.1, 21003.0], [32.2, 21003.0], [32.3, 21003.0], [32.4, 21003.0], [32.5, 21003.0], [32.6, 21004.0], [32.7, 21005.0], [32.8, 21006.0], [32.9, 21007.0], [33.0, 21009.0], [33.1, 21009.0], [33.2, 21012.0], [33.3, 21013.0], [33.4, 21013.0], [33.5, 21015.0], [33.6, 21015.0], [33.7, 21017.0], [33.8, 21017.0], [33.9, 21019.0], [34.0, 21020.0], [34.1, 21021.0], [34.2, 21021.0], [34.3, 21022.0], [34.4, 21023.0], [34.5, 21024.0], [34.6, 21025.0], [34.7, 21025.0], [34.8, 21027.0], [34.9, 21027.0], [35.0, 21030.0], [35.1, 21032.0], [35.2, 21033.0], [35.3, 21037.0], [35.4, 21044.0], [35.5, 21066.0], [35.6, 21075.0], [35.7, 21081.0], [35.8, 21088.0], [35.9, 21096.0], [36.0, 21103.0], [36.1, 21120.0], [36.2, 21128.0], [36.3, 21131.0], [36.4, 21152.0], [36.5, 21164.0], [36.6, 21184.0], [36.7, 21192.0], [36.8, 21221.0], [36.9, 21260.0], [37.0, 21295.0], [37.1, 21391.0], [37.2, 21444.0], [37.3, 21467.0], [37.4, 21504.0], [37.5, 21563.0], [37.6, 21565.0], [37.7, 21636.0], [37.8, 21653.0], [37.9, 21701.0], [38.0, 21747.0], [38.1, 21763.0], [38.2, 21830.0], [38.3, 21892.0], [38.4, 22013.0], [38.5, 22117.0], [38.6, 22244.0], [38.7, 22278.0], [38.8, 22299.0], [38.9, 22344.0], [39.0, 22458.0], [39.1, 22542.0], [39.2, 22622.0], [39.3, 22765.0], [39.4, 22875.0], [39.5, 22916.0], [39.6, 22986.0], [39.7, 23061.0], [39.8, 23150.0], [39.9, 23255.0], [40.0, 23316.0], [40.1, 23380.0], [40.2, 23598.0], [40.3, 23706.0], [40.4, 23861.0], [40.5, 23888.0], [40.6, 24091.0], [40.7, 24219.0], [40.8, 24317.0], [40.9, 24354.0], [41.0, 24517.0], [41.1, 24792.0], [41.2, 24835.0], [41.3, 24938.0], [41.4, 25035.0], [41.5, 25072.0], [41.6, 25144.0], [41.7, 25172.0], [41.8, 25201.0], [41.9, 25217.0], [42.0, 25252.0], [42.1, 25254.0], [42.2, 25313.0], [42.3, 25323.0], [42.4, 25342.0], [42.5, 25372.0], [42.6, 25376.0], [42.7, 25400.0], [42.8, 25419.0], [42.9, 25493.0], [43.0, 25499.0], [43.1, 25511.0], [43.2, 25539.0], [43.3, 25557.0], [43.4, 25573.0], [43.5, 25581.0], [43.6, 25604.0], [43.7, 25619.0], [43.8, 25633.0], [43.9, 25646.0], [44.0, 25695.0], [44.1, 25704.0], [44.2, 25720.0], [44.3, 25767.0], [44.4, 25775.0], [44.5, 25797.0], [44.6, 25824.0], [44.7, 25833.0], [44.8, 25849.0], [44.9, 25906.0], [45.0, 25923.0], [45.1, 25925.0], [45.2, 25944.0], [45.3, 25947.0], [45.4, 25982.0], [45.5, 25997.0], [45.6, 26042.0], [45.7, 26064.0], [45.8, 26070.0], [45.9, 26105.0], [46.0, 26126.0], [46.1, 26147.0], [46.2, 26160.0], [46.3, 26188.0], [46.4, 26215.0], [46.5, 26242.0], [46.6, 26253.0], [46.7, 26259.0], [46.8, 26283.0], [46.9, 26333.0], [47.0, 26379.0], [47.1, 26383.0], [47.2, 26419.0], [47.3, 26420.0], [47.4, 26469.0], [47.5, 26481.0], [47.6, 26503.0], [47.7, 26522.0], [47.8, 26538.0], [47.9, 26554.0], [48.0, 26566.0], [48.1, 26612.0], [48.2, 26624.0], [48.3, 26646.0], [48.4, 26678.0], [48.5, 26700.0], [48.6, 26724.0], [48.7, 26739.0], [48.8, 26756.0], [48.9, 26770.0], [49.0, 26814.0], [49.1, 26831.0], [49.2, 26849.0], [49.3, 26913.0], [49.4, 26920.0], [49.5, 26981.0], [49.6, 26992.0], [49.7, 27036.0], [49.8, 27050.0], [49.9, 27125.0], [50.0, 27157.0], [50.1, 27165.0], [50.2, 27226.0], [50.3, 27242.0], [50.4, 27267.0], [50.5, 27283.0], [50.6, 27307.0], [50.7, 27341.0], [50.8, 27368.0], [50.9, 27383.0], [51.0, 27418.0], [51.1, 27485.0], [51.2, 27506.0], [51.3, 27563.0], [51.4, 27592.0], [51.5, 27621.0], [51.6, 27639.0], [51.7, 27704.0], [51.8, 27718.0], [51.9, 27763.0], [52.0, 27804.0], [52.1, 27824.0], [52.2, 27887.0], [52.3, 27977.0], [52.4, 28077.0], [52.5, 28090.0], [52.6, 28165.0], [52.7, 28260.0], [52.8, 28335.0], [52.9, 28381.0], [53.0, 28543.0], [53.1, 28568.0], [53.2, 28587.0], [53.3, 28611.0], [53.4, 28642.0], [53.5, 28689.0], [53.6, 28786.0], [53.7, 28841.0], [53.8, 28908.0], [53.9, 28936.0], [54.0, 29044.0], [54.1, 29121.0], [54.2, 29245.0], [54.3, 29271.0], [54.4, 29478.0], [54.5, 29651.0], [54.6, 29677.0], [54.7, 29740.0], [54.8, 29792.0], [54.9, 29814.0], [55.0, 29829.0], [55.1, 29896.0], [55.2, 30007.0], [55.3, 30142.0], [55.4, 30206.0], [55.5, 30246.0], [55.6, 30267.0], [55.7, 30337.0], [55.8, 30471.0], [55.9, 30512.0], [56.0, 30535.0], [56.1, 30561.0], [56.2, 30614.0], [56.3, 30769.0], [56.4, 30805.0], [56.5, 30864.0], [56.6, 30935.0], [56.7, 30955.0], [56.8, 31067.0], [56.9, 31115.0], [57.0, 31152.0], [57.1, 31200.0], [57.2, 31253.0], [57.3, 31354.0], [57.4, 31515.0], [57.5, 31548.0], [57.6, 31643.0], [57.7, 31677.0], [57.8, 31705.0], [57.9, 31767.0], [58.0, 31789.0], [58.1, 31838.0], [58.2, 31902.0], [58.3, 31966.0], [58.4, 32015.0], [58.5, 32027.0], [58.6, 32045.0], [58.7, 32082.0], [58.8, 32104.0], [58.9, 32113.0], [59.0, 32129.0], [59.1, 32151.0], [59.2, 32182.0], [59.3, 32205.0], [59.4, 32217.0], [59.5, 32236.0], [59.6, 32246.0], [59.7, 32259.0], [59.8, 32283.0], [59.9, 32311.0], [60.0, 32318.0], [60.1, 32323.0], [60.2, 32343.0], [60.3, 32350.0], [60.4, 32376.0], [60.5, 32396.0], [60.6, 32433.0], [60.7, 32450.0], [60.8, 32467.0], [60.9, 32476.0], [61.0, 32483.0], [61.1, 32492.0], [61.2, 32498.0], [61.3, 32522.0], [61.4, 32538.0], [61.5, 32555.0], [61.6, 32568.0], [61.7, 32585.0], [61.8, 32608.0], [61.9, 32611.0], [62.0, 32635.0], [62.1, 32641.0], [62.2, 32645.0], [62.3, 32646.0], [62.4, 32665.0], [62.5, 32672.0], [62.6, 32676.0], [62.7, 32687.0], [62.8, 32700.0], [62.9, 32706.0], [63.0, 32722.0], [63.1, 32725.0], [63.2, 32730.0], [63.3, 32755.0], [63.4, 32787.0], [63.5, 32792.0], [63.6, 32804.0], [63.7, 32825.0], [63.8, 32833.0], [63.9, 32855.0], [64.0, 32891.0], [64.1, 32898.0], [64.2, 32920.0], [64.3, 32936.0], [64.4, 32946.0], [64.5, 32959.0], [64.6, 32965.0], [64.7, 32974.0], [64.8, 32978.0], [64.9, 32983.0], [65.0, 32995.0], [65.1, 33014.0], [65.2, 33023.0], [65.3, 33028.0], [65.4, 33034.0], [65.5, 33039.0], [65.6, 33047.0], [65.7, 33061.0], [65.8, 33066.0], [65.9, 33068.0], [66.0, 33071.0], [66.1, 33073.0], [66.2, 33085.0], [66.3, 33095.0], [66.4, 33100.0], [66.5, 33103.0], [66.6, 33105.0], [66.7, 33112.0], [66.8, 33115.0], [66.9, 33126.0], [67.0, 33128.0], [67.1, 33135.0], [67.2, 33141.0], [67.3, 33152.0], [67.4, 33165.0], [67.5, 33167.0], [67.6, 33168.0], [67.7, 33175.0], [67.8, 33182.0], [67.9, 33185.0], [68.0, 33192.0], [68.1, 33210.0], [68.2, 33221.0], [68.3, 33224.0], [68.4, 33226.0], [68.5, 33238.0], [68.6, 33242.0], [68.7, 33245.0], [68.8, 33256.0], [68.9, 33273.0], [69.0, 33276.0], [69.1, 33282.0], [69.2, 33293.0], [69.3, 33300.0], [69.4, 33317.0], [69.5, 33327.0], [69.6, 33328.0], [69.7, 33331.0], [69.8, 33346.0], [69.9, 33355.0], [70.0, 33366.0], [70.1, 33369.0], [70.2, 33378.0], [70.3, 33385.0], [70.4, 33389.0], [70.5, 33407.0], [70.6, 33421.0], [70.7, 33424.0], [70.8, 33426.0], [70.9, 33431.0], [71.0, 33437.0], [71.1, 33440.0], [71.2, 33458.0], [71.3, 33475.0], [71.4, 33484.0], [71.5, 33502.0], [71.6, 33513.0], [71.7, 33525.0], [71.8, 33533.0], [71.9, 33545.0], [72.0, 33563.0], [72.1, 33570.0], [72.2, 33578.0], [72.3, 33582.0], [72.4, 33593.0], [72.5, 33596.0], [72.6, 33605.0], [72.7, 33609.0], [72.8, 33625.0], [72.9, 33633.0], [73.0, 33646.0], [73.1, 33649.0], [73.2, 33650.0], [73.3, 33667.0], [73.4, 33668.0], [73.5, 33671.0], [73.6, 33677.0], [73.7, 33690.0], [73.8, 33711.0], [73.9, 33722.0], [74.0, 33732.0], [74.1, 33735.0], [74.2, 33744.0], [74.3, 33756.0], [74.4, 33768.0], [74.5, 33773.0], [74.6, 33778.0], [74.7, 33786.0], [74.8, 33790.0], [74.9, 33800.0], [75.0, 33812.0], [75.1, 33815.0], [75.2, 33821.0], [75.3, 33846.0], [75.4, 33847.0], [75.5, 33862.0], [75.6, 33871.0], [75.7, 33881.0], [75.8, 33884.0], [75.9, 33888.0], [76.0, 33903.0], [76.1, 33911.0], [76.2, 33936.0], [76.3, 33943.0], [76.4, 33947.0], [76.5, 33954.0], [76.6, 33971.0], [76.7, 33990.0], [76.8, 34020.0], [76.9, 34025.0], [77.0, 34039.0], [77.1, 34053.0], [77.2, 34059.0], [77.3, 34071.0], [77.4, 34074.0], [77.5, 34099.0], [77.6, 34104.0], [77.7, 34109.0], [77.8, 34120.0], [77.9, 34151.0], [78.0, 34159.0], [78.1, 34168.0], [78.2, 34198.0], [78.3, 34208.0], [78.4, 34217.0], [78.5, 34239.0], [78.6, 34247.0], [78.7, 34269.0], [78.8, 34277.0], [78.9, 34291.0], [79.0, 34312.0], [79.1, 34331.0], [79.2, 34338.0], [79.3, 34344.0], [79.4, 34359.0], [79.5, 34370.0], [79.6, 34386.0], [79.7, 34409.0], [79.8, 34421.0], [79.9, 34424.0], [80.0, 34454.0], [80.1, 34467.0], [80.2, 34496.0], [80.3, 34518.0], [80.4, 34524.0], [80.5, 34555.0], [80.6, 34578.0], [80.7, 34647.0], [80.8, 34654.0], [80.9, 34689.0], [81.0, 34701.0], [81.1, 34713.0], [81.2, 34772.0], [81.3, 34779.0], [81.4, 34848.0], [81.5, 34870.0], [81.6, 34923.0], [81.7, 34966.0], [81.8, 35011.0], [81.9, 35035.0], [82.0, 35045.0], [82.1, 35081.0], [82.2, 35107.0], [82.3, 35157.0], [82.4, 35184.0], [82.5, 35193.0], [82.6, 35201.0], [82.7, 35211.0], [82.8, 35230.0], [82.9, 35290.0], [83.0, 35355.0], [83.1, 35402.0], [83.2, 35451.0], [83.3, 35481.0], [83.4, 35507.0], [83.5, 35528.0], [83.6, 35604.0], [83.7, 35638.0], [83.8, 35658.0], [83.9, 35679.0], [84.0, 35711.0], [84.1, 35722.0], [84.2, 35734.0], [84.3, 35780.0], [84.4, 35805.0], [84.5, 35820.0], [84.6, 35829.0], [84.7, 35853.0], [84.8, 35893.0], [84.9, 35924.0], [85.0, 35959.0], [85.1, 35986.0], [85.2, 36016.0], [85.3, 36040.0], [85.4, 36047.0], [85.5, 36078.0], [85.6, 36088.0], [85.7, 36104.0], [85.8, 36106.0], [85.9, 36119.0], [86.0, 36142.0], [86.1, 36163.0], [86.2, 36190.0], [86.3, 36199.0], [86.4, 36226.0], [86.5, 36267.0], [86.6, 36312.0], [86.7, 36343.0], [86.8, 36352.0], [86.9, 36354.0], [87.0, 36363.0], [87.1, 36380.0], [87.2, 36387.0], [87.3, 36410.0], [87.4, 36429.0], [87.5, 36502.0], [87.6, 36525.0], [87.7, 36624.0], [87.8, 36725.0], [87.9, 36805.0], [88.0, 36843.0], [88.1, 36883.0], [88.2, 36950.0], [88.3, 37011.0], [88.4, 37089.0], [88.5, 37201.0], [88.6, 37254.0], [88.7, 37316.0], [88.8, 37374.0], [88.9, 37396.0], [89.0, 37605.0], [89.1, 37707.0], [89.2, 38017.0], [89.3, 38040.0], [89.4, 38265.0], [89.5, 38745.0], [89.6, 39341.0], [89.7, 39529.0], [89.8, 39586.0], [89.9, 39700.0], [90.0, 39820.0], [90.1, 39883.0], [90.2, 40025.0], [90.3, 40048.0], [90.4, 40137.0], [90.5, 40194.0], [90.6, 40267.0], [90.7, 40309.0], [90.8, 40347.0], [90.9, 40405.0], [91.0, 40433.0], [91.1, 40493.0], [91.2, 40506.0], [91.3, 40550.0], [91.4, 40642.0], [91.5, 40671.0], [91.6, 40776.0], [91.7, 40799.0], [91.8, 40885.0], [91.9, 40935.0], [92.0, 40950.0], [92.1, 40977.0], [92.2, 41004.0], [92.3, 41013.0], [92.4, 41040.0], [92.5, 41074.0], [92.6, 41116.0], [92.7, 41192.0], [92.8, 41233.0], [92.9, 41257.0], [93.0, 41280.0], [93.1, 41298.0], [93.2, 41357.0], [93.3, 41374.0], [93.4, 41438.0], [93.5, 41469.0], [93.6, 41559.0], [93.7, 41642.0], [93.8, 41647.0], [93.9, 41656.0], [94.0, 41728.0], [94.1, 41794.0], [94.2, 41823.0], [94.3, 41855.0], [94.4, 41943.0], [94.5, 42055.0], [94.6, 42068.0], [94.7, 42100.0], [94.8, 42123.0], [94.9, 42155.0], [95.0, 42192.0], [95.1, 42229.0], [95.2, 42290.0], [95.3, 42354.0], [95.4, 42447.0], [95.5, 42487.0], [95.6, 42529.0], [95.7, 42589.0], [95.8, 42664.0], [95.9, 42669.0], [96.0, 42724.0], [96.1, 42807.0], [96.2, 42843.0], [96.3, 42940.0], [96.4, 42978.0], [96.5, 43151.0], [96.6, 43204.0], [96.7, 43315.0], [96.8, 43426.0], [96.9, 43490.0], [97.0, 48041.0], [97.1, 48882.0], [97.2, 49178.0], [97.3, 49332.0], [97.4, 49729.0], [97.5, 50640.0], [97.6, 51344.0], [97.7, 52175.0], [97.8, 53666.0], [97.9, 54149.0], [98.0, 54371.0], [98.1, 55083.0], [98.2, 55437.0], [98.3, 56343.0], [98.4, 58966.0], [98.5, 62311.0], [98.6, 63092.0], [98.7, 63129.0], [98.8, 63164.0], [98.9, 63215.0], [99.0, 63334.0], [99.1, 63397.0], [99.2, 63505.0], [99.3, 63529.0], [99.4, 63682.0], [99.5, 63799.0], [99.6, 63908.0], [99.7, 63993.0], [99.8, 64017.0], [99.9, 66589.0]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 400.0, "maxY": 274.0, "series": [{"data": [[32900.0, 46.0], [34500.0, 22.0], [33700.0, 58.0], [35300.0, 8.0], [36100.0, 34.0], [36900.0, 8.0], [37700.0, 2.0], [38500.0, 2.0], [40900.0, 18.0], [40100.0, 6.0], [39300.0, 4.0], [41700.0, 12.0], [42500.0, 10.0], [43300.0, 6.0], [48900.0, 4.0], [49700.0, 2.0], [51300.0, 2.0], [52100.0, 2.0], [53700.0, 2.0], [55300.0, 2.0], [63300.0, 6.0], [400.0, 4.0], [500.0, 4.0], [600.0, 4.0], [800.0, 4.0], [900.0, 10.0], [1000.0, 2.0], [1100.0, 2.0], [1300.0, 2.0], [1400.0, 4.0], [1500.0, 2.0], [1600.0, 4.0], [1700.0, 8.0], [1800.0, 2.0], [1900.0, 12.0], [2000.0, 2.0], [2100.0, 4.0], [2200.0, 2.0], [2300.0, 8.0], [2500.0, 6.0], [2600.0, 8.0], [2700.0, 4.0], [2800.0, 2.0], [3000.0, 6.0], [3300.0, 4.0], [3400.0, 4.0], [3500.0, 10.0], [3600.0, 4.0], [3700.0, 2.0], [3800.0, 8.0], [3900.0, 2.0], [4000.0, 6.0], [4100.0, 4.0], [4300.0, 4.0], [4200.0, 2.0], [66500.0, 2.0], [4400.0, 2.0], [4500.0, 6.0], [4600.0, 2.0], [4800.0, 8.0], [4900.0, 2.0], [5100.0, 4.0], [5200.0, 4.0], [5300.0, 4.0], [5400.0, 4.0], [5500.0, 2.0], [5600.0, 4.0], [5700.0, 4.0], [5800.0, 4.0], [6600.0, 2.0], [6400.0, 2.0], [6500.0, 2.0], [6700.0, 6.0], [6900.0, 6.0], [7100.0, 6.0], [7000.0, 2.0], [7400.0, 6.0], [7200.0, 2.0], [7300.0, 2.0], [7600.0, 6.0], [7700.0, 2.0], [7800.0, 8.0], [8000.0, 4.0], [8200.0, 2.0], [8400.0, 2.0], [8600.0, 2.0], [8800.0, 2.0], [9000.0, 4.0], [9200.0, 2.0], [9400.0, 4.0], [9600.0, 8.0], [10000.0, 2.0], [10200.0, 2.0], [10400.0, 4.0], [10600.0, 6.0], [10800.0, 6.0], [11400.0, 6.0], [11600.0, 4.0], [12000.0, 8.0], [11800.0, 8.0], [12200.0, 6.0], [12400.0, 8.0], [12600.0, 12.0], [12800.0, 14.0], [13000.0, 12.0], [13200.0, 16.0], [13400.0, 16.0], [13800.0, 12.0], [13600.0, 10.0], [14200.0, 14.0], [14000.0, 8.0], [14400.0, 22.0], [14600.0, 20.0], [14800.0, 10.0], [15200.0, 10.0], [15000.0, 18.0], [15400.0, 6.0], [15800.0, 6.0], [15600.0, 2.0], [16200.0, 8.0], [16000.0, 16.0], [17200.0, 4.0], [16800.0, 4.0], [16400.0, 6.0], [17600.0, 10.0], [18000.0, 12.0], [18400.0, 18.0], [19200.0, 28.0], [18800.0, 16.0], [20400.0, 12.0], [19600.0, 24.0], [20000.0, 26.0], [20800.0, 20.0], [21200.0, 14.0], [21600.0, 14.0], [22000.0, 2.0], [22400.0, 2.0], [22800.0, 6.0], [23200.0, 6.0], [23600.0, 2.0], [24000.0, 4.0], [24800.0, 4.0], [25200.0, 16.0], [25600.0, 22.0], [26000.0, 18.0], [26400.0, 22.0], [26800.0, 16.0], [27600.0, 12.0], [27200.0, 20.0], [28000.0, 10.0], [28800.0, 8.0], [29200.0, 8.0], [29600.0, 8.0], [30000.0, 6.0], [30400.0, 4.0], [30800.0, 8.0], [31200.0, 10.0], [31600.0, 10.0], [32000.0, 20.0], [32400.0, 38.0], [32800.0, 28.0], [33600.0, 62.0], [34400.0, 28.0], [35200.0, 18.0], [36000.0, 26.0], [36800.0, 12.0], [37600.0, 6.0], [40000.0, 10.0], [40800.0, 6.0], [42400.0, 10.0], [41600.0, 12.0], [43200.0, 6.0], [48800.0, 2.0], [48000.0, 2.0], [53600.0, 2.0], [58400.0, 2.0], [62400.0, 2.0], [63200.0, 6.0], [64000.0, 4.0], [33100.0, 84.0], [34700.0, 20.0], [33900.0, 36.0], [35500.0, 8.0], [36300.0, 34.0], [37900.0, 2.0], [38700.0, 2.0], [39500.0, 12.0], [40300.0, 10.0], [42700.0, 8.0], [41100.0, 10.0], [41900.0, 4.0], [49100.0, 2.0], [49900.0, 2.0], [51500.0, 2.0], [53900.0, 2.0], [56300.0, 2.0], [63500.0, 8.0], [16500.0, 8.0], [16900.0, 4.0], [17300.0, 8.0], [17700.0, 4.0], [18100.0, 16.0], [18500.0, 10.0], [18900.0, 22.0], [19300.0, 12.0], [19700.0, 28.0], [20100.0, 16.0], [20500.0, 16.0], [20900.0, 26.0], [21300.0, 6.0], [21700.0, 14.0], [22100.0, 8.0], [22500.0, 8.0], [22900.0, 6.0], [23300.0, 8.0], [23700.0, 4.0], [24100.0, 4.0], [24500.0, 2.0], [24900.0, 8.0], [25300.0, 30.0], [25700.0, 26.0], [26100.0, 26.0], [26500.0, 26.0], [26900.0, 18.0], [27300.0, 20.0], [28500.0, 18.0], [27700.0, 16.0], [28100.0, 8.0], [28900.0, 8.0], [29700.0, 12.0], [30100.0, 6.0], [30500.0, 18.0], [30900.0, 10.0], [31300.0, 4.0], [31700.0, 14.0], [32100.0, 26.0], [32500.0, 26.0], [33800.0, 58.0], [33000.0, 70.0], [34600.0, 14.0], [35400.0, 16.0], [36200.0, 14.0], [37000.0, 10.0], [40200.0, 10.0], [41000.0, 18.0], [41800.0, 10.0], [42600.0, 10.0], [43400.0, 6.0], [46600.0, 2.0], [50600.0, 2.0], [54600.0, 2.0], [55400.0, 2.0], [63400.0, 4.0], [33300.0, 60.0], [34100.0, 34.0], [34900.0, 10.0], [36500.0, 10.0], [35700.0, 22.0], [37300.0, 14.0], [38100.0, 2.0], [40500.0, 12.0], [39700.0, 6.0], [42900.0, 8.0], [42100.0, 20.0], [41300.0, 10.0], [49300.0, 4.0], [50100.0, 2.0], [52500.0, 2.0], [54100.0, 2.0], [56500.0, 2.0], [55700.0, 2.0], [58900.0, 2.0], [63700.0, 6.0], [64500.0, 2.0], [8300.0, 4.0], [8900.0, 2.0], [9300.0, 2.0], [9700.0, 10.0], [9900.0, 2.0], [10300.0, 4.0], [10500.0, 4.0], [10700.0, 6.0], [11100.0, 6.0], [11300.0, 4.0], [11500.0, 8.0], [11700.0, 14.0], [11900.0, 6.0], [12100.0, 2.0], [12500.0, 6.0], [12700.0, 2.0], [12300.0, 8.0], [13100.0, 6.0], [12900.0, 14.0], [13300.0, 10.0], [13500.0, 8.0], [13700.0, 10.0], [13900.0, 16.0], [14300.0, 14.0], [14100.0, 14.0], [14500.0, 16.0], [14700.0, 4.0], [15100.0, 12.0], [14900.0, 18.0], [15300.0, 14.0], [15500.0, 4.0], [15700.0, 6.0], [16300.0, 8.0], [16100.0, 6.0], [15900.0, 4.0], [17000.0, 4.0], [16600.0, 2.0], [17400.0, 4.0], [18200.0, 8.0], [17800.0, 4.0], [18600.0, 10.0], [19000.0, 34.0], [19400.0, 34.0], [19800.0, 36.0], [20200.0, 34.0], [20600.0, 22.0], [21000.0, 274.0], [21400.0, 12.0], [21800.0, 8.0], [22200.0, 12.0], [22600.0, 6.0], [23000.0, 8.0], [23400.0, 4.0], [23800.0, 8.0], [24200.0, 4.0], [24600.0, 4.0], [25000.0, 8.0], [25400.0, 16.0], [25800.0, 18.0], [26200.0, 24.0], [26600.0, 20.0], [27000.0, 10.0], [27400.0, 10.0], [27800.0, 12.0], [28200.0, 4.0], [28600.0, 12.0], [29000.0, 4.0], [29400.0, 6.0], [29800.0, 14.0], [30200.0, 14.0], [30600.0, 6.0], [31000.0, 8.0], [31800.0, 6.0], [32200.0, 30.0], [32600.0, 52.0], [33200.0, 64.0], [34000.0, 44.0], [34800.0, 14.0], [35600.0, 20.0], [36400.0, 12.0], [37200.0, 10.0], [38000.0, 8.0], [39600.0, 2.0], [40400.0, 12.0], [42000.0, 14.0], [42800.0, 8.0], [41200.0, 20.0], [46000.0, 2.0], [50800.0, 2.0], [49200.0, 2.0], [51600.0, 2.0], [63600.0, 4.0], [74300.0, 2.0], [33500.0, 54.0], [34300.0, 36.0], [35100.0, 20.0], [36700.0, 6.0], [35900.0, 14.0], [38300.0, 2.0], [40700.0, 8.0], [39900.0, 4.0], [41500.0, 8.0], [42300.0, 6.0], [43100.0, 4.0], [54300.0, 4.0], [55900.0, 2.0], [63100.0, 12.0], [62300.0, 2.0], [63900.0, 8.0], [71800.0, 2.0], [66100.0, 2.0], [16700.0, 6.0], [17100.0, 4.0], [17500.0, 2.0], [17900.0, 20.0], [18300.0, 10.0], [18700.0, 12.0], [19100.0, 26.0], [19500.0, 26.0], [20300.0, 16.0], [19900.0, 32.0], [21500.0, 12.0], [21100.0, 42.0], [20700.0, 14.0], [21900.0, 4.0], [22300.0, 8.0], [22700.0, 4.0], [23100.0, 4.0], [23500.0, 2.0], [23900.0, 2.0], [24300.0, 10.0], [25100.0, 14.0], [25500.0, 30.0], [24700.0, 2.0], [25900.0, 32.0], [26300.0, 16.0], [26700.0, 26.0], [27100.0, 18.0], [27500.0, 14.0], [27900.0, 4.0], [28300.0, 10.0], [28700.0, 6.0], [29100.0, 6.0], [29500.0, 2.0], [29900.0, 2.0], [30300.0, 4.0], [30700.0, 4.0], [31100.0, 10.0], [31500.0, 12.0], [31900.0, 10.0], [32300.0, 34.0], [32700.0, 40.0], [33400.0, 52.0], [34200.0, 38.0], [35000.0, 20.0], [35800.0, 26.0], [36600.0, 4.0], [37400.0, 2.0], [38200.0, 2.0], [40600.0, 10.0], [39800.0, 6.0], [41400.0, 10.0], [43000.0, 4.0], [42200.0, 8.0], [48600.0, 2.0], [49400.0, 2.0], [55000.0, 4.0], [63000.0, 4.0], [62200.0, 2.0], [63800.0, 2.0]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 74300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4752.0, "series": [{"data": [[0.0, 4.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 32.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4752.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 328.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 315.793103448276, "minX": 1.59470388E12, "maxY": 875.6062416998694, "series": [{"data": [[1.59470394E12, 875.6062416998694], [1.594704E12, 352.5681818181813], [1.59470388E12, 315.793103448276]], "isOverall": false, "label": "jp@gc - Stepping Thread Group -Momenton", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594704E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5042.634615384616, "minX": 1.0, "maxY": 74303.0, "series": [{"data": [[2.0, 53730.0], [4.0, 42300.5], [5.0, 46070.0], [6.0, 42197.0], [7.0, 52580.0], [8.0, 63977.0], [9.0, 63716.0], [10.0, 63993.0], [11.0, 55083.0], [12.0, 42354.0], [13.0, 55922.0], [14.0, 42816.0], [15.0, 64017.0], [16.0, 64001.0], [18.0, 61047.5], [19.0, 63370.0], [20.0, 51544.0], [21.0, 63959.0], [22.0, 64517.0], [23.0, 42100.0], [24.0, 42072.0], [25.0, 42180.0], [26.0, 66126.0], [27.0, 42724.0], [28.0, 42447.0], [30.0, 53569.5], [33.0, 29002.0], [32.0, 42418.5], [37.0, 42372.5], [36.0, 63667.5], [39.0, 63799.0], [38.0, 42068.0], [41.0, 63908.0], [40.0, 63229.0], [43.0, 63529.0], [42.0, 56343.0], [45.0, 62311.0], [44.0, 29163.0], [47.0, 52869.0], [49.0, 63408.0], [48.0, 31091.0], [51.0, 63466.0], [50.0, 30512.0], [53.0, 62263.0], [52.0, 29228.0], [55.0, 63714.0], [54.0, 63106.0], [57.0, 41906.0], [56.0, 63639.0], [59.0, 39820.0], [58.0, 63043.0], [61.0, 63510.0], [60.0, 41834.0], [63.0, 41800.0], [62.0, 52175.0], [67.0, 40506.0], [66.0, 40520.0], [65.0, 41785.0], [64.0, 40611.0], [71.0, 36043.0], [69.0, 63528.0], [68.0, 41708.0], [75.0, 51860.5], [73.0, 39700.0], [72.0, 46634.0], [79.0, 41656.0], [78.0, 34637.5], [76.0, 63256.0], [83.0, 40351.0], [82.0, 63164.0], [81.0, 41643.0], [80.0, 40454.0], [87.0, 50994.0], [85.0, 63143.0], [84.0, 63397.0], [91.0, 63334.0], [90.0, 29245.0], [89.0, 63092.0], [88.0, 38265.0], [94.0, 30176.0], [93.0, 28568.0], [92.0, 40950.0], [99.0, 29478.0], [98.0, 39316.0], [97.0, 40943.0], [96.0, 46321.5], [103.0, 28936.0], [102.0, 30251.0], [101.0, 63183.0], [100.0, 29814.0], [107.0, 39586.0], [106.0, 30471.0], [105.0, 40048.0], [104.0, 30614.0], [111.0, 41247.5], [109.0, 51344.0], [108.0, 30347.0], [115.0, 41294.0], [114.0, 29740.0], [113.0, 41296.0], [112.0, 30403.0], [119.0, 41013.0], [118.0, 39874.0], [117.0, 54149.0], [116.0, 41247.0], [123.0, 41192.0], [122.0, 41116.0], [121.0, 41004.0], [120.0, 49288.0], [127.0, 38745.0], [126.0, 41012.0], [125.0, 32320.0], [124.0, 39771.0], [135.0, 39539.0], [134.0, 40867.0], [133.0, 41138.0], [132.0, 40885.0], [131.0, 39726.0], [130.0, 40935.0], [129.0, 40943.0], [128.0, 41532.0], [143.0, 32475.0], [142.0, 66589.0], [141.0, 36998.0], [139.0, 42466.0], [136.0, 42031.0], [151.0, 35638.0], [150.0, 36196.0], [149.0, 41233.0], [148.0, 41057.0], [147.0, 41317.0], [146.0, 53666.0], [145.0, 41151.0], [144.0, 40328.0], [159.0, 40270.0], [158.0, 40433.0], [157.0, 41838.0], [156.0, 30864.0], [155.0, 40309.0], [154.0, 54371.0], [153.0, 40361.0], [152.0, 36202.0], [167.0, 40251.0], [166.0, 41647.0], [165.0, 40799.0], [164.0, 40026.0], [163.0, 35924.0], [162.0, 40194.0], [161.0, 31253.0], [160.0, 40161.0], [175.0, 41648.0], [174.0, 39883.0], [173.0, 40025.0], [172.0, 39957.0], [171.0, 40510.0], [170.0, 35744.0], [169.0, 71846.0], [168.0, 40417.0], [183.0, 35140.0], [182.0, 41298.0], [181.0, 40480.0], [180.0, 35998.0], [179.0, 30811.0], [178.0, 36297.0], [177.0, 35853.0], [176.0, 48912.0], [191.0, 41008.5], [189.0, 42143.0], [188.0, 35607.0], [187.0, 35356.0], [186.0, 35675.0], [185.0, 48667.0], [184.0, 32259.0], [199.0, 41708.0], [198.0, 32722.0], [197.0, 35658.0], [196.0, 35340.0], [195.0, 42055.0], [194.0, 48941.0], [193.0, 35193.0], [192.0, 31670.0], [200.0, 5042.634615384616], [207.0, 41040.0], [206.0, 36047.0], [205.0, 41646.0], [204.0, 35712.0], [203.0, 38304.0], [201.0, 36410.0], [212.0, 21693.0], [215.0, 33039.0], [214.0, 34116.0], [213.0, 33242.0], [211.0, 55769.0], [210.0, 36103.0], [209.0, 40347.0], [208.0, 33609.0], [223.0, 35829.0], [222.0, 40671.0], [221.0, 35407.0], [220.0, 32946.0], [219.0, 32498.0], [218.0, 35507.0], [217.0, 33167.0], [216.0, 42300.0], [231.0, 32828.0], [230.0, 58439.0], [229.0, 49415.0], [228.0, 32937.0], [227.0, 36343.0], [226.0, 32964.0], [225.0, 36354.0], [224.0, 37900.0], [234.0, 21828.5], [239.0, 26917.0], [237.0, 35107.0], [236.0, 35961.0], [235.0, 33189.0], [233.0, 34524.0], [232.0, 34467.0], [247.0, 37093.0], [246.0, 34351.0], [245.0, 36267.0], [244.0, 33184.0], [243.0, 33602.0], [242.0, 35722.0], [241.0, 34338.0], [240.0, 33167.0], [251.0, 21696.0], [255.0, 49332.0], [254.0, 33582.0], [253.0, 41550.0], [252.0, 34025.0], [250.0, 33224.0], [249.0, 33770.0], [248.0, 39622.0], [270.0, 34025.0], [261.0, 23425.5], [260.0, 37395.0], [263.0, 32965.0], [257.0, 36385.0], [256.0, 33884.0], [259.0, 33644.0], [258.0, 35402.0], [262.0, 32517.0], [271.0, 36099.0], [269.0, 49963.0], [268.0, 36043.0], [267.0, 33273.0], [266.0, 36040.0], [265.0, 37253.0], [264.0, 43315.0], [287.0, 36226.0], [279.0, 22081.5], [278.0, 42155.0], [277.0, 36725.0], [276.0, 37485.0], [280.0, 21869.0], [286.0, 42290.0], [285.0, 36350.0], [284.0, 48882.0], [275.0, 34201.0], [274.0, 35809.0], [273.0, 36237.0], [272.0, 32343.0], [283.0, 32706.0], [282.0, 32568.0], [281.0, 34021.0], [303.0, 32948.0], [295.0, 23575.5], [293.0, 28054.0], [294.0, 35230.0], [297.0, 24026.5], [296.0, 35189.0], [302.0, 34074.0], [301.0, 55437.0], [300.0, 50855.0], [291.0, 36195.0], [290.0, 36190.0], [289.0, 35201.0], [288.0, 34446.0], [299.0, 34294.0], [298.0, 35035.0], [318.0, 34454.0], [319.0, 33754.0], [317.0, 35011.0], [316.0, 32075.0], [315.0, 34198.0], [314.0, 34208.0], [313.0, 33780.5], [311.0, 32351.0], [305.0, 37058.0], [304.0, 33513.0], [307.0, 34059.0], [306.0, 33443.0], [310.0, 34343.0], [309.0, 35170.0], [308.0, 32669.0], [334.0, 22303.0], [322.0, 22481.5], [325.0, 26239.0], [324.0, 33826.0], [327.0, 33868.0], [321.0, 34071.0], [320.0, 33949.0], [326.0, 34779.0], [335.0, 33720.0], [333.0, 32706.0], [332.0, 33236.0], [323.0, 41823.0], [331.0, 35655.0], [330.0, 34375.0], [329.0, 33800.0], [328.0, 33778.0], [351.0, 33735.0], [341.0, 18440.333333333336], [340.0, 33814.0], [342.0, 43020.0], [347.0, 23976.5], [350.0, 33175.0], [349.0, 43221.0], [348.0, 33129.0], [339.0, 32635.0], [338.0, 33677.0], [337.0, 36866.0], [336.0, 33391.0], [343.0, 35711.0], [346.0, 33061.0], [345.0, 41413.0], [344.0, 37616.0], [366.0, 34103.0], [367.0, 32672.0], [365.0, 36360.0], [364.0, 32724.0], [363.0, 32314.0], [362.0, 53984.0], [361.0, 33300.0], [360.0, 32158.0], [359.0, 33980.0], [353.0, 36940.5], [355.0, 32641.0], [354.0, 34120.0], [357.0, 32528.0], [356.0, 32129.0], [382.0, 41469.0], [383.0, 32982.0], [381.0, 33431.0], [380.0, 36080.0], [379.0, 31993.0], [378.0, 32665.0], [377.0, 33970.0], [376.0, 33526.0], [375.0, 33670.0], [369.0, 35807.0], [368.0, 32376.0], [371.0, 32127.0], [370.0, 32371.0], [374.0, 32104.0], [373.0, 32023.0], [372.0, 36353.0], [396.0, 31781.0], [398.0, 32056.0], [399.0, 33005.0], [397.0, 33182.0], [395.0, 33359.0], [393.0, 33090.5], [391.0, 55363.0], [385.0, 32943.0], [384.0, 41374.0], [387.0, 33073.0], [386.0, 32795.0], [390.0, 34265.0], [389.0, 33296.0], [388.0, 33023.0], [413.0, 33797.0], [400.0, 13884.979729729732], [402.0, 32580.0], [401.0, 34370.0], [407.0, 36525.0], [406.0, 54634.0], [405.0, 32646.0], [404.0, 34524.0], [403.0, 24524.5], [414.0, 23232.0], [412.0, 39557.0], [411.0, 42151.0], [410.0, 34239.0], [409.0, 33503.0], [408.0, 32634.0], [430.0, 32881.0], [417.0, 11788.0], [419.0, 32522.0], [418.0, 36085.75000000001], [423.0, 33593.0], [422.0, 33424.0], [421.0, 33238.0], [420.0, 32139.0], [428.0, 22806.0], [431.0, 42923.0], [429.0, 33482.0], [427.0, 36112.0], [426.0, 36374.0], [425.0, 33563.0], [424.0, 36016.0], [434.0, 22645.5], [436.0, 31998.5], [437.0, 32920.0], [439.0, 49729.0], [433.0, 32995.0], [432.0, 50173.0], [438.0, 32792.0], [443.0, 23533.0], [447.0, 33671.0], [446.0, 33290.0], [445.0, 35898.0], [444.0, 33035.0], [435.0, 33072.0], [441.0, 33540.0], [440.0, 33789.0], [461.0, 27618.0], [463.0, 41280.0], [458.0, 30446.5], [462.0, 33484.0], [460.0, 34097.0], [451.0, 42843.0], [450.0, 33344.0], [449.0, 33383.0], [448.0, 33650.0], [459.0, 36525.0], [457.0, 34760.0], [455.0, 33648.0], [454.0, 33068.0], [453.0, 34035.0], [452.0, 35955.0], [479.0, 32911.0], [470.0, 21633.666666666664], [469.0, 32015.0], [468.0, 33972.0], [472.0, 24151.0], [478.0, 36312.0], [477.0, 38040.0], [476.0, 33167.0], [467.0, 33305.0], [466.0, 32818.0], [465.0, 33936.0], [464.0, 33809.0], [471.0, 41642.0], [475.0, 42505.0], [474.0, 35780.0], [473.0, 34041.0], [495.0, 33226.0], [490.0, 22540.0], [494.0, 36573.0], [493.0, 33633.0], [492.0, 34777.0], [483.0, 33786.0], [482.0, 34239.0], [481.0, 33354.0], [480.0, 33609.0], [491.0, 36107.0], [489.0, 33308.0], [488.0, 33142.0], [487.0, 33185.0], [486.0, 33077.0], [485.0, 34111.0], [484.0, 41371.0], [510.0, 32273.0], [511.0, 37374.0], [509.0, 33014.0], [508.0, 33650.0], [507.0, 32396.0], [506.0, 33034.0], [505.0, 42667.0], [504.0, 36335.0], [503.0, 33881.0], [497.0, 33947.0], [496.0, 35035.0], [499.0, 33883.0], [498.0, 41568.0], [502.0, 35873.0], [501.0, 36917.0], [500.0, 36224.0], [540.0, 34324.0], [524.0, 25285.0], [523.0, 34701.0], [522.0, 37316.0], [521.0, 36046.0], [520.0, 32608.0], [525.0, 28099.0], [543.0, 36392.0], [529.0, 35026.0], [528.0, 37330.0], [531.0, 33210.0], [530.0, 43426.0], [533.0, 33437.0], [532.0, 32444.0], [535.0, 33775.0], [534.0, 32492.0], [542.0, 33879.0], [541.0, 32787.0], [539.0, 32752.0], [538.0, 34175.0], [537.0, 34701.0], [536.0, 42978.0], [527.0, 46455.0], [513.0, 42751.0], [512.0, 40137.0], [515.0, 32973.0], [514.0, 32983.0], [517.0, 42644.0], [516.0, 35799.0], [519.0, 33113.0], [518.0, 32687.0], [569.0, 26269.666666666668], [552.0, 22170.0], [553.0, 34555.0], [554.0, 27125.0], [558.0, 23468.0], [557.0, 32608.0], [556.0, 32252.0], [555.0, 34979.0], [559.0, 35524.0], [545.0, 32638.0], [544.0, 35215.0], [547.0, 34647.0], [546.0, 35488.0], [549.0, 32480.0], [548.0, 32483.0], [551.0, 34285.0], [550.0, 37089.0], [575.0, 32755.0], [561.0, 36805.0], [560.0, 33846.0], [563.0, 40550.0], [562.0, 33929.0], [565.0, 54364.0], [564.0, 34217.0], [567.0, 35601.0], [566.0, 34421.0], [574.0, 41353.0], [573.0, 34801.0], [572.0, 33098.0], [571.0, 33646.0], [570.0, 43204.0], [605.0, 42664.0], [578.0, 22947.0], [577.0, 33733.0], [576.0, 33667.0], [579.0, 33219.0], [581.0, 34053.0], [580.0, 35841.0], [583.0, 33165.0], [582.0, 35081.0], [591.0, 35327.0], [590.0, 42569.0], [589.0, 21152.0], [588.0, 33135.0], [587.0, 34005.0], [586.0, 33293.0], [585.0, 33231.0], [584.0, 32730.0], [592.0, 24518.5], [593.0, 33768.0], [595.0, 34434.0], [594.0, 43352.0], [597.0, 43151.0], [596.0, 42974.0], [599.0, 42669.0], [598.0, 35713.0], [600.0, 17106.232558139513], [602.0, 21103.0], [601.0, 35734.0], [607.0, 33781.0], [606.0, 32855.0], [604.0, 42386.0], [603.0, 37730.5], [635.0, 32757.0], [618.0, 20843.666666666668], [616.0, 27691.5], [629.0, 21277.0], [628.0, 21162.5], [626.0, 33760.0], [625.0, 42543.0], [624.0, 42192.0], [631.0, 21131.5], [630.0, 21109.0], [633.0, 31635.5], [632.0, 34159.0], [615.0, 40588.0], [614.0, 32350.0], [613.0, 42436.0], [612.0, 32208.0], [611.0, 21081.0], [610.0, 32103.0], [609.0, 42290.0], [608.0, 21131.0], [623.0, 33709.0], [622.0, 34109.0], [621.0, 34217.0], [620.0, 21153.5], [634.0, 33888.0], [637.0, 26812.0], [639.0, 41427.0], [638.0, 41559.0], [636.0, 42123.0], [666.0, 41259.0], [670.0, 36105.0], [648.0, 30817.5], [650.0, 32751.0], [649.0, 32898.0], [652.0, 33210.0], [651.0, 33425.0], [653.0, 26869.0], [655.0, 31240.5], [647.0, 41748.0], [646.0, 33168.0], [645.0, 34662.0], [644.0, 41855.0], [643.0, 41108.0], [642.0, 33185.0], [641.0, 32217.0], [640.0, 33579.0], [654.0, 34424.0], [665.0, 36088.0], [664.0, 33348.0], [667.0, 33329.0], [657.0, 27587.333333333332], [661.0, 27369.333333333336], [660.0, 33221.0], [659.0, 35679.0], [658.0, 41225.0], [663.0, 41011.0], [662.0, 34864.0], [671.0, 40902.0], [656.0, 34772.0], [669.0, 40776.0], [668.0, 40267.0], [696.0, 32230.0], [700.0, 28775.5], [681.0, 27946.5], [680.0, 37995.0], [682.0, 50640.0], [684.0, 36119.0], [683.0, 33276.0], [685.0, 27728.5], [695.0, 27572.5], [694.0, 33455.0], [692.0, 36975.0], [691.0, 32480.0], [690.0, 36347.0], [689.0, 33431.0], [688.0, 33426.0], [697.0, 29820.0], [687.0, 34250.0], [678.0, 33007.0], [676.0, 37513.5], [674.0, 32113.0], [673.0, 33541.0], [672.0, 40069.0], [686.0, 40292.0], [703.0, 34703.0], [702.0, 38346.0], [701.0, 35825.0], [699.0, 33363.0], [698.0, 36820.0], [731.0, 27775.0], [704.0, 27997.0], [718.0, 28485.5], [717.0, 21120.0], [716.0, 33629.0], [715.0, 21059.0], [714.0, 36479.0], [713.0, 42155.0], [712.0, 33653.0], [719.0, 32804.0], [727.0, 27763.0], [726.0, 21088.0], [725.0, 33954.0], [724.0, 33873.0], [723.0, 36363.0], [722.0, 34039.0], [721.0, 36424.0], [720.0, 38179.0], [733.0, 29618.5], [735.0, 36352.0], [734.0, 21113.0], [732.0, 41074.0], [730.0, 33355.0], [729.0, 38017.0], [728.0, 33066.0], [711.0, 33889.0], [710.0, 34409.0], [709.0, 33812.0], [708.0, 36104.0], [707.0, 33443.0], [706.0, 33667.0], [705.0, 33762.0], [764.0, 21049.0], [736.0, 27284.0], [737.0, 36387.0], [739.0, 37605.0], [738.0, 36624.0], [740.0, 26655.5], [743.0, 28929.5], [742.0, 36054.0], [741.0, 33903.0], [761.0, 32300.0], [760.0, 34344.0], [749.0, 25163.666666666668], [748.0, 37707.0], [747.0, 32540.0], [746.0, 37202.0], [745.0, 36835.0], [744.0, 37201.0], [750.0, 32883.0], [751.0, 34052.0], [767.0, 36792.0], [753.0, 35829.0], [752.0, 37298.0], [755.0, 33071.0], [754.0, 32338.0], [757.0, 35805.0], [756.0, 36667.0], [759.0, 34165.0], [758.0, 36883.0], [766.0, 21032.0], [765.0, 35862.0], [763.0, 34535.0], [762.0, 21066.0], [794.0, 34712.0], [798.0, 35199.0], [789.0, 27758.5], [790.0, 27630.5], [799.0, 32346.0], [784.0, 35959.0], [786.0, 35820.0], [785.0, 35481.0], [788.0, 33908.0], [787.0, 33822.0], [797.0, 21092.0], [796.0, 34151.0], [795.0, 35157.0], [793.0, 34331.0], [792.0, 34968.5], [783.0, 34365.0], [769.0, 37351.0], [768.0, 34359.0], [771.0, 33581.0], [770.0, 35762.0], [773.0, 36354.0], [772.0, 36155.0], [775.0, 35156.0], [774.0, 39514.0], [782.0, 34271.0], [781.0, 36199.0], [780.0, 35706.0], [779.0, 35830.5], [777.0, 35604.0], [776.0, 35723.0], [826.0, 27679.0], [830.0, 43395.0], [800.0, 19785.924778761066], [810.0, 27916.0], [809.0, 34478.0], [808.0, 29648.666666666664], [811.0, 21075.0], [813.0, 27355.0], [812.0, 34312.0], [815.0, 34158.0], [814.0, 33792.0], [820.0, 25909.333333333332], [822.0, 27775.5], [821.0, 32901.0], [823.0, 35290.0], [825.0, 34870.0], [824.0, 34168.0], [807.0, 34333.0], [806.0, 34923.0], [805.0, 32209.0], [804.0, 34559.0], [803.0, 34966.0], [802.0, 34369.5], [801.0, 21095.0], [827.0, 31961.0], [831.0, 33943.0], [817.0, 33346.0], [816.0, 33947.0], [819.0, 33798.0], [818.0, 34744.0], [829.0, 32323.0], [828.0, 36993.5], [839.0, 42940.0], [861.0, 32844.0], [846.0, 29321.333333333332], [845.0, 28632.666666666664], [844.0, 36429.0], [843.0, 33095.0], [842.0, 43132.5], [841.0, 33744.0], [840.0, 43200.0], [856.0, 33407.0], [838.0, 33714.5], [837.0, 42876.0], [836.0, 32811.5], [835.0, 39905.0], [834.0, 33006.0], [833.0, 33176.0], [832.0, 33612.5], [847.0, 32045.0], [850.0, 26568.666666666664], [852.0, 27768.0], [851.0, 42458.0], [853.0, 33241.0], [855.0, 41438.0], [854.0, 21069.0], [857.0, 27468.0], [860.0, 27805.5], [862.0, 21075.0], [849.0, 26521.0], [848.0, 31904.0], [859.0, 34014.0], [858.0, 33022.0], [892.0, 33378.0], [865.0, 32547.666666666668], [864.0, 33342.0], [867.0, 32343.0], [866.0, 33788.0], [869.0, 32982.0], [868.0, 33274.0], [871.0, 33100.0], [870.0, 32674.0], [879.0, 33815.0], [878.0, 33167.0], [877.0, 33134.0], [876.0, 33518.0], [875.0, 33611.0], [874.0, 36106.0], [873.0, 33790.0], [872.0, 33371.0], [895.0, 33625.0], [881.0, 33223.0], [880.0, 33846.0], [883.0, 33165.0], [882.0, 21075.0], [885.0, 32638.0], [884.0, 34651.0], [887.0, 31230.0], [886.0, 33068.0], [894.0, 33569.0], [893.0, 33487.0], [891.0, 32676.0], [890.0, 33223.0], [889.0, 33137.0], [888.0, 33331.0], [925.0, 29550.333333333332], [920.0, 27777.0], [908.0, 28015.5], [906.0, 36932.5], [905.0, 32927.0], [904.0, 33141.0], [911.0, 32727.0], [896.0, 33121.0], [899.0, 33273.5], [897.0, 32993.0], [901.0, 39000.0], [900.0, 32891.0], [903.0, 21001.0], [902.0, 21037.0], [910.0, 25272.666666666668], [922.0, 27338.0], [927.0, 36163.0], [926.0, 32699.0], [923.0, 33736.0], [921.0, 32419.0], [919.0, 33274.0], [918.0, 33387.0], [917.0, 33774.0], [916.0, 33103.0], [915.0, 38226.0], [914.0, 33381.0], [913.0, 33422.0], [912.0, 33109.0], [952.0, 32884.5], [958.0, 21020.0], [954.0, 27881.5], [930.0, 27622.0], [929.0, 33010.0], [928.0, 33252.5], [931.0, 33242.0], [933.0, 33268.0], [932.0, 33440.0], [935.0, 21006.0], [934.0, 21004.0], [943.0, 32677.0], [942.0, 33047.0], [941.0, 33741.0], [940.0, 36189.0], [939.0, 33155.0], [938.0, 33408.0], [937.0, 33479.0], [936.0, 32791.0], [956.0, 27819.0], [959.0, 33690.0], [944.0, 33520.0], [947.0, 33255.0], [946.0, 20997.5], [949.0, 33101.0], [948.0, 34062.0], [955.0, 36476.0], [953.0, 35451.0], [951.0, 34104.0], [950.0, 33097.0], [985.0, 28477.0], [960.0, 29257.5], [965.0, 29772.0], [964.0, 33576.0], [963.0, 35926.0], [962.0, 33320.0], [961.0, 36060.0], [966.0, 33285.0], [984.0, 33821.0], [967.0, 33115.0], [971.0, 28477.5], [970.0, 33621.0], [969.0, 27819.5], [968.0, 33047.0], [973.0, 33423.0], [972.0, 34099.0], [974.0, 25902.333333333332], [975.0, 35420.0], [991.0, 34336.5], [977.0, 33041.0], [976.0, 33674.0], [979.0, 33733.0], [978.0, 34689.0], [981.0, 32585.0], [980.0, 33507.0], [983.0, 33711.0], [982.0, 28099.5], [990.0, 30671.0], [989.0, 33570.0], [988.0, 34441.33333333333], [987.0, 34578.0], [986.0, 34286.0], [995.0, 22542.0], [1000.0, 26856.56387665204], [999.0, 34311.75], [998.0, 33668.0], [997.0, 33943.0], [996.0, 34467.333333333336], [994.0, 34023.0], [993.0, 34677.0], [992.0, 33436.0], [1.0, 74303.0]], "isOverall": false, "label": "HomePage", "isController": false}, {"data": [[655.4992181391716, 26968.763878029713]], "isOverall": false, "label": "HomePage-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3259.6, "minX": 1.59470388E12, "maxY": 2764686.1, "series": [{"data": [[1.59470394E12, 2764686.1], [1.594704E12, 1406762.8], [1.59470388E12, 706892.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59470394E12, 12682.466666666667], [1.594704E12, 6481.733333333334], [1.59470388E12, 3259.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594704E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9635.902298850579, "minX": 1.59470388E12, "maxY": 38259.71306818179, "series": [{"data": [[1.59470394E12, 25695.860557768876], [1.594704E12, 38259.71306818179], [1.59470388E12, 9635.902298850579]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594704E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7358.422413793104, "minX": 1.59470388E12, "maxY": 34341.9105113637, "series": [{"data": [[1.59470394E12, 19836.478751660048], [1.594704E12, 34341.9105113637], [1.59470388E12, 7358.422413793104]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594704E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4548.666666666668, "minX": 1.59470388E12, "maxY": 28478.718749999956, "series": [{"data": [[1.59470394E12, 15993.422974767569], [1.594704E12, 28478.718749999956], [1.59470388E12, 4548.666666666668]], "isOverall": false, "label": "HomePage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594704E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 478.0, "minX": 1.59470388E12, "maxY": 74303.0, "series": [{"data": [[1.59470394E12, 43395.0], [1.594704E12, 74303.0], [1.59470388E12, 17298.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59470394E12, 13295.90499677062], [1.594704E12, 29235.904994386434], [1.59470388E12, 525.2969852101803]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59470394E12, 13336.678611884117], [1.594704E12, 29245.0], [1.59470388E12, 581.1267059159279]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59470394E12, 13299.0], [1.594704E12, 29245.0], [1.59470388E12, 556.3134926050901]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59470394E12, 12491.0], [1.594704E12, 28568.0], [1.59470388E12, 478.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59470394E12, 26236.0], [1.594704E12, 35604.0], [1.59470388E12, 11247.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594704E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8301.0, "minX": 12.0, "maxY": 51544.0, "series": [{"data": [[32.0, 14334.5], [34.0, 15852.0], [36.0, 27363.0], [38.0, 24219.0], [40.0, 23598.0], [42.0, 20968.0], [44.0, 32995.0], [46.0, 21114.5], [48.0, 33075.0], [50.0, 28689.0], [52.0, 21615.0], [54.0, 28543.0], [56.0, 26545.0], [58.0, 33962.0], [60.0, 33061.0], [62.0, 32704.0], [64.0, 32674.0], [68.0, 25397.5], [70.0, 28052.5], [78.0, 33331.0], [128.0, 31515.0], [132.0, 40939.0], [150.0, 51544.0], [170.0, 32292.0], [12.0, 14079.0], [14.0, 8301.0], [20.0, 9458.0], [24.0, 14212.0], [26.0, 16192.5], [28.0, 8509.0], [30.0, 20058.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[128.0, 21003.0], [40.0, 21002.0], [170.0, 21015.0], [42.0, 21005.0], [44.0, 21004.0], [48.0, 21026.0], [50.0, 21001.0], [52.0, 21088.0], [54.0, 21152.0], [56.0, 21025.0], [58.0, 21038.0], [60.0, 21130.0], [62.0, 21015.0], [64.0, 19191.0], [70.0, 21153.5], [78.0, 21056.0], [30.0, 21033.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 170.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 12.0, "maxY": 50233.0, "series": [{"data": [[32.0, 9507.0], [34.0, 11227.0], [36.0, 23306.5], [38.0, 20198.0], [40.0, 19917.0], [42.0, 16524.5], [44.0, 28900.0], [46.0, 16393.5], [48.0, 28934.0], [50.0, 24503.0], [52.0, 17351.0], [54.0, 24316.0], [56.0, 22052.0], [58.0, 29744.0], [60.0, 28972.0], [62.0, 28791.5], [64.0, 28551.0], [68.0, 22056.0], [70.0, 23756.0], [78.0, 29335.0], [128.0, 27362.0], [132.0, 37985.5], [150.0, 50233.0], [170.0, 28211.0], [12.0, 10130.5], [14.0, 6601.0], [20.0, 7319.5], [24.0, 10557.0], [26.0, 13606.0], [28.0, 6966.5], [30.0, 15984.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[128.0, 0.0], [40.0, 0.0], [170.0, 0.0], [42.0, 0.0], [44.0, 0.0], [48.0, 0.0], [50.0, 0.0], [52.0, 0.0], [54.0, 0.0], [56.0, 0.0], [58.0, 0.0], [60.0, 0.0], [62.0, 0.0], [64.0, 0.0], [70.0, 0.0], [78.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 170.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.6, "minX": 1.59470388E12, "maxY": 53.666666666666664, "series": [{"data": [[1.59470394E12, 53.666666666666664], [1.59470388E12, 31.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59470394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.59470388E12, "maxY": 45.13333333333333, "series": [{"data": [[1.59470394E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.59470394E12, 45.13333333333333], [1.594704E12, 23.066666666666666], [1.59470388E12, 11.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59470394E12, 4.833333333333333], [1.594704E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594704E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.59470388E12, "maxY": 45.13333333333333, "series": [{"data": [[1.59470394E12, 5.066666666666666], [1.594704E12, 0.4]], "isOverall": false, "label": "HomePage-failure", "isController": false}, {"data": [[1.59470394E12, 45.13333333333333], [1.594704E12, 23.066666666666666], [1.59470388E12, 11.6]], "isOverall": false, "label": "HomePage-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594704E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.59470388E12, "maxY": 45.13333333333333, "series": [{"data": [[1.59470394E12, 45.13333333333333], [1.594704E12, 23.066666666666666], [1.59470388E12, 11.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59470394E12, 5.066666666666666], [1.594704E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594704E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 36000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

